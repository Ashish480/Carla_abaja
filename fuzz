import carla
import numpy as np
import time
import pygame
import random
import matplotlib.pyplot as plt
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import sys
import traceback

# [All previous classes and functions remain the same]

# Modify the radar_callback to be more robust
def radar_callback(data, *args, **kwargs):
    global distance_front, radar_history, last_valid_distance
    
    # Default values to prevent potential None type errors
    ego_vehicle = kwargs.get('ego_vehicle')
    target_vehicle = kwargs.get('target_vehicle')
    radar = kwargs.get('radar')
    
    try:
        if not ego_vehicle or not ego_vehicle.is_alive or not target_vehicle or not target_vehicle.is_alive:
            print("Vehicle not available or not alive")
            return
        
        # Get locations in world space
        ego_location = ego_vehicle.get_location()
        target_location = target_vehicle.get_location()
        
        # Calculate direct distance between vehicles
        direct_distance = ego_location.distance(target_location)
        
        # Defensive programming for radar processing
        valid_detections = []
        
        if data and len(data) > 0 and radar:
            # Get radar transform in world coordinates
            radar_transform = radar.get_transform()
            radar_location = radar_transform.location
            radar_forward = radar_transform.get_forward_vector()
            
            for detection in data:
                try:
                    # Calculate world position of the detection
                    detection_location = radar_location + detection.depth * carla.Vector3D(
                        radar_forward.x * detection.depth * np.cos(detection.azimuth),
                        radar_forward.y * detection.depth * np.sin(detection.azimuth),
                        radar_forward.z * detection.depth * np.sin(detection.altitude)
                    )
                    
                    # Check if this is likely the target vehicle
                    dist_to_target = detection_location.distance(target_location)
                    if dist_to_target < 3.0:  # If detection is close to target vehicle
                        valid_detections.append(detection.depth)
                except Exception as e:
                    print(f"Error processing radar detection: {e}")
        
        # Update distance based on valid detections
        if valid_detections:
            # Use the smallest valid detection
            closest_detection = min(valid_detections)
            
            # Add to history with weighting toward closer objects
            radar_history.append(closest_detection)
            
            # Keep history limited to avoid stale data
            if len(radar_history) > 5:
                radar_history.pop(0)
            
            # Use median filtering for more stability
            distance_front = sorted(radar_history)[len(radar_history)//2]
            last_valid_distance = distance_front
        else:
            # If no valid detections but we see target vehicle
            if direct_distance < 50:
                # Use direct distance minus vehicle offset
                distance_front = max(direct_distance - 3.0, 0.0)  # Account for vehicle size
                last_valid_distance = distance_front
                
                # Update history with direct measurement
                radar_history.append(distance_front)
                if len(radar_history) > 5:
                    radar_history.pop(0)
            else:
                # No valid detections and target too far - use last valid with decay
                if radar_history:
                    distance_front = last_valid_distance + 0.5  # Gradually increase distance if no detection
                    distance_front = min(distance_front, 100)  # Cap at reasonable value
                else:
                    distance_front = 100  # Default to large value
        
        # Safety check - ensure positive distance
        distance_front = max(distance_front, 0.1)
        
        print(f"Distance to target vehicle: {distance_front:.2f}m (direct: {direct_distance:.2f}m)")
    
    except Exception as e:
        print(f"Error in radar callback: {e}")
        traceback.print_exc()

def main():
    global distance_front
    distance_front = 100  # Initialize to a large value
    radar_history = []  # Reset radar history
    last_valid_distance = 100  # Reset last valid distance
    
    # ACC parameters
    target_distance = 8.0  # Target gap in meters
    
    # Better tuned PID controllers
    steering_pid = PIDController(kp=0.15, ki=0.01, kd=0.1, integral_limit=3)
    distance_pid = DistancePIDController(kp=0.8, ki=0.05, kd=0.4, target_distance=target_distance, integral_limit=3)

    # Setup CARLA client with extended timeout
    client = carla.Client('127.0.0.1', 2000)
    client.set_timeout(30.0)  # Extended timeout
    
    try:
        world = client.get_world()
    except Exception as e:
        print(f"Failed to connect to CARLA: {e}")
        return
    
    # Configure simulation settings
    settings = world.get_settings()
    settings.synchronous_mode = True
    settings.fixed_delta_seconds = 0.05  # 20 FPS
    world.apply_settings(settings)
    
    # Clear existing vehicles
    for actor in world.get_actors():
        if actor.type_id.startswith('vehicle') or actor.type_id.startswith('sensor'):
            try:
                actor.destroy()
            except:
                pass
    
    blueprint_library = world.get_blueprint_library()
    vehicle_bp = blueprint_library.find('vehicle.tesla.model3')
    
    # Find a suitable spawn point
    spawn_points = world.get_map().get_spawn_points()
    
    # Sort spawn points by road complexity
    def road_complexity(sp):
        waypoint = world.get_map().get_waypoint(sp.location)
        if not waypoint:
            return 1000
        try:
            next_wps = waypoint.next(5.0)
            if not next_wps:
                return 900
            next_wp = next_wps[0]
            heading_diff = abs(waypoint.transform.rotation.yaw - next_wp.transform.rotation.yaw)
            heading_diff = min(heading_diff, 360 - heading_diff)
            return heading_diff
        except:
            return 800
    
    spawn_points.sort(key=road_complexity)
    
    vehicle = None
    for sp in spawn_points[:10]:
        if sp.location is not None:
            vehicle = world.try_spawn_actor(vehicle_bp, sp)
            if vehicle is not None:
                break
    
    # Fallback to any spawn point
    if vehicle is None:
        random.shuffle(spawn_points)
        for sp in spawn_points:
            if sp.location is not None:
                vehicle = world.try_spawn_actor(vehicle_bp, sp)
                if vehicle is not None:
                    break
    
    if vehicle is None:
        print("Failed to find a suitable spawn point for ego vehicle.")
        return
    
    # Wait for physics to settle
    for _ in range(5):
        world.tick()
    
    # Spawn target vehicle
    target_vehicle = spawn_target_vehicle(world, blueprint_library.find('vehicle.tesla.model3'), 
                                         vehicle.get_transform(), target_speed=25, 
                                         target_distance=30)
    
    if target_vehicle is None:
        print("Failed to spawn target vehicle.")
        return
    
    # Wait for target vehicle to initialize
    for _ in range(10):
        world.tick()
        
    # Position ego vehicle
    position_ego_behind_target(world, vehicle, target_vehicle, distance=20.0)
    
    # Wait again for physics to settle
    for _ in range(10):
        world.tick()
    
    # Setup waypoints for lane following
    waypoints = get_lane_waypoints(world, distance=2.0)
    
    # Setup display
    pygame.init()
    display = pygame.display.set_mode((800, 600), pygame.HWSURFACE | pygame.DOUBLEBUF)
    pygame.display.set_caption("CARLA ACC Simulation - 8m Target")
    font = pygame.font.Font(None, 36)
    
    # Improved radar setup
    radar_bp = blueprint_library.find('sensor.other.radar')
    radar_bp.set_attribute('horizontal_fov', '60')
    radar_bp.set_attribute('vertical_fov', '30')
    radar_bp.set_attribute('range', '100')
    radar_bp.set_attribute('points_per_second', '4000')
    
    radar_transform = carla.Transform(carla.Location(x=2.0, y=0, z=1.0))
    radar = world.spawn_actor(radar_bp, radar_transform, attach_to=vehicle)
    
    # Setup camera
    camera_bp = blueprint_library.find('sensor.camera.rgb')
    camera_bp.set_attribute("image_size_x", "800")
    camera_bp.set_attribute("image_size_y", "600")
    camera_bp.set_attribute("fov", "110")
    
    camera_transform_normal = carla.Transform(carla.Location(x=1.5, y=0, z=2.0))
    camera = world.spawn_actor(camera_bp, camera_transform_normal, attach_to=vehicle)
    
    # Data collection setup
    distance_data = []
    speed_data = []
    throttle_data = []
    time_data = []
    start_time = time.time()
    
    # Modify radar callback setup with keyword arguments
    radar.listen(lambda data: radar_callback(data, ego_vehicle=vehicle, target_vehicle=target_vehicle, radar=radar))
    
    # Setup camera callback
    camera.listen(lambda image: process_img(image, display, vehicle, 0.0, font, distance_front, 
                                         target_distance, 0.0))
    
    # Main control loop
    try:
        print("Starting ACC simulation...")
        print(f"Target following distance: {target_distance} meters")
        
        # Flag to ensure we wait for valid distance measurements
        valid_measurement = False
        
        # Give some time to initialize
        for _ in range(20):
            world.tick()
            pygame.display.flip()
            time.sleep(0.05)
        
        frame_count = 0
        steering_angle = 0.0
        throttle_value = 0.0
        
        while True:
            # Process events
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    return
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        return
                    # Allow manual override of target distance
                    elif event.key == pygame.K_UP:
                        target_distance += 1.0
                        distance_pid.target_distance = target_distance
                        print(f"Increased target distance to {target_distance:.1f}m")
                    elif event.key == pygame.K_DOWN:
                        target_distance = max(4.0, target_distance - 1.0)
                        distance_pid.target_distance = target_distance
                        print(f"Decreased target distance to {target_distance:.1f}m")
            
            # Ensure target vehicle exists and is alive
            if target_vehicle is None or not target_vehicle.is_alive:
                print("Target vehicle lost, attempting to respawn...")
                # Try to respawn target vehicle
                target_vehicle = spawn_target_vehicle(world, blueprint_library.find('vehicle.tesla.model3'), 
                                                   vehicle.get_transform(), target_speed=25)
                if target_vehicle is None:
                    print("Failed to respawn target vehicle. Ending simulation.")
                    break
                    
                # Reset radar history when target changes
                radar_history.clear()
                
                # Wait for target to initialize
                for _ in range(10):
                    world.tick()
            
            # Wait for valid measurements
            if distance_front == 100 and not valid_measurement:
                if frame_count > 100:  # If too many frames without valid measurement
                    print("Warning: No valid distance measurements. Check target vehicle visibility.")
                    # Try looking for target vehicle directly
                    ego_location = vehicle.get_location()
                    if target_vehicle and target_vehicle.is_alive:
                        target_location = target_vehicle.get_location()
                        direct_distance = ego_location.distance(target_location)
                        if direct_distance < 50:
                            distance_front = max(direct_distance - 3.0, 0.1)
                            valid_measurement = True
                            print(f"Using direct line of sight: {distance_front:.2f}m")
                world.tick()
                pygame.display.flip()
                frame_count += 1
                continue
            
            valid_measurement = True
            frame_count = 0
            
            # Calculate control inputs
            dt = 0.05  # Fixed time step
            
            # Compute steering using Stanley controller
            steering_angle = compute_steering_angle(vehicle, waypoints, steering_pid, k=0.5)
            steering_control = np.clip(steering_angle / np.radians(30), -1.0, 1.0)
            
            # Get vehicle speed
            velocity = vehicle.get_velocity()
            speed = 3.6 * np.sqrt(velocity.x**2 + velocity.y**2 + velocity.z**2)
            
            # Compute throttle/brake using fuzzy logic ACC
            throttle_value = fuzzy_logic_acc(distance_front, speed, target_distance)
            
            # Verify with PID controller as a safety check
            pid_throttle = distance_pid.compute(distance_front, dt)
            
            # Use more conservative of the two controllers
            if pid_throttle < throttle_value and distance_front < target_distance:
                throttle_value = pid_throttle
                control_mode = "PID (safety override)"
            else:
                control_mode = "Fuzzy Logic"
            
            print(f"Speed: {speed:.2f} km/h | Distance: {distance_front:.2f}m | " +
                 f"Control: {control_mode} | Throttle: {throttle_value:.2f} | " +
                 f"Steering: {np.degrees(steering_angle):.2f}°")
            
            # Apply control to vehicle
            control = carla.VehicleControl()
            
            if throttle_value >= 0:
                control.throttle = float(throttle_value)
                control.brake = 0.0
            else:
                control.throttle = 0.0
                control.brake = float(abs(throttle_value))
                
            control.steer = float(steering_control)
            control.hand_brake = False
            control.manual_gear_shift = False
            
            vehicle.apply_control(control)
            
            # Collect data for analysis
            current_time = time.time() - start_time
            distance_data.append(distance_front)
            speed_data.append(speed)
            throttle_data.append(throttle_value)
            time_data.append(current_time)
            
            # Update camera display with latest steering angle and throttle
            camera.listen(lambda image: process_img(image, display, vehicle, steering_angle, font, 
                                                 distance_front, target_distance, throttle_value))
            
            world.tick()
            pygame.display.flip()
    
    except Exception as e:
        print(f"Error in simulation: {e}")
        traceback.print_exc()
    
    finally:
        # Plot results before cleanup
        if len(time_data) > 10:  # Only if we have meaningful data
            plt.figure(figsize=(12, 8))
            
            plt.subplot(3, 1, 1)
            plt.plot(time_data, distance_data, 'b-')
            plt.axhline(y=target_distance, color='r', linestyle='--', label=f'Target ({target_distance}m)')
            plt.ylabel('Distance (m)')
            plt.title('ACC Performance')
            plt.grid(True)
            plt.legend()
            
            plt.subplot(3, 1, 2)
            plt.plot(time_data, speed_data, 'g-')
            plt.ylabel('Speed (km/h)')
            plt.grid(True)
            
            plt.subplot(3, 1, 3)
            plt.plot(time_data, throttle_data, 'r-')
            plt.axhline(y=0, color='k', linestyle='-')
            plt.ylabel('Throttle/Brake')
            plt.xlabel('Time (s)')
            plt.grid(True)
            
            plt.tight_layout()
            plt.savefig('acc_performance.png')
            plt.show()
        
        # Clean up actors
        print('Cleaning up actors...')
        try:
            if camera and camera.is_alive:
                camera.destroy()
            if radar and radar.is_alive:
                radar.destroy()
            if vehicle and vehicle.is_alive:
                vehicle.destroy()
            if target_vehicle and target_vehicle.is_alive:
                target_vehicle.destroy()
        except Exception as e:
            print(f"Error during cleanup: {e}")
        
        pygame.quit()
        print('Actors cleaned up. Simulation ended.')

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('Cancelled by user')
    except Exception as e:
        print(f'Error: {e}')
        traceback.print_exc()
    finally:
        print('Exiting...')
